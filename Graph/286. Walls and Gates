286. Walls and Gates
You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
  
  class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        if(rooms.size() == 0) return;
        int rows = rooms.size();
        int cols = rooms[0].size();
        
        queue<pair<int,int>> q;
        for(int i = 0; i < rows; ++i)
        {
            for(int j = 0; j < cols; ++j)
            {
                if(rooms[i][j] == 0)
                    q.push(make_pair(i,j));
            }
        }
        
        int distance = 1;
        vector<int> xDir = {0,0,-1,1};
        vector<int> yDir = {-1,1,0,0};
        
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0; i < size; ++i)
            {
                pair<int,int> cur = q.front();q.pop();
                for(int j = 0; j < 4; ++j)
                {
                    pair<int,int> next = make_pair(cur.first + xDir[j], cur.second + yDir[j] );
                    if(next.first >= 0 && next.second >= 0 && next.first < rows && next.second < cols)
                    {
                        if(rooms[next.first][next.second] == INT_MAX)
                        {
                            rooms[next.first][next.second] = distance;
                            q.push(next);
                        }
                    }
                }
            }
            ++distance;
        }
    }
};
