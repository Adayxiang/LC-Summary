261. Graph Valid Tree
Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.

class Solution {
public:
    bool validTree(int n, vector<vector<int>>& edges) {
        vector<int> states(n, 0);
        vector<vector<int>> graph(n, vector<int>{});
        for(auto &edge : edges)
        {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        
        queue<int> q;
        q.push(0);
        states[0] = 1;
        int count = 0;
        
        while(!q.empty())
        {
            int node = q.front();q.pop();
            ++count;
            for(int i = 0; i < graph[node].size(); ++i)
            {
                int next = graph[node][i];
                if(states[next] == 1) return false;
                else if(states[next] == 0)
                {
                    states[next] = 1;
                    q.push(next);
                }
            }
            
            states[node] = 2;
        }
        return count == n;
    }
};

Reference:https://leetcode.com/problems/graph-valid-tree/discuss/69038/share-my-25-line-dfs-20-line-bfs-and-clean-union-find-java-solutions
