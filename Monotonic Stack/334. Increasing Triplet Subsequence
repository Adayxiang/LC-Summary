334. Increasing Triplet Subsequence
Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:

Return true if there exists i, j, k 
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Note: Your algorithm should run in O(n) time complexity and O(1) space complexity.

Example 1:

Input: [1,2,3,4,5]
Output: true
Example 2:

Input: [5,4,3,2,1]
Output: false


Solution1:
TC: O(N)
SC: O(N)
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return false;
        stack<int> st;
        vector<int> monoVec(n, -1);
        for(int i = 0; i < n; ++i)
        {
            while(!st.empty() && nums[i] > nums[st.top()])
            {
                monoVec[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }
        
        stack<int> st2;
        vector<int> monoVec2(n, -1);
        for(int i = n - 1; i >= 0; --i)
        {
            while(!st2.empty() && nums[i] < nums[st2.top()])
            {
                monoVec2[st2.top()] = i;
                st2.pop();
            }
            st2.push(i);
        }
        
        for(int i = 0; i < n; ++i)
        {
            if(monoVec[i] != -1 && monoVec2[i] != -1)
                return true;
        }
        return false;
        
    }
};


Solution2:
It is more like a dp method;
TC: O(n)
SC: O(1)
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        if(n <= 3) return false;
        
        int num1 = INT_MAX;
        int num2 = INT_MAX;
        
        for(int i = 0; i < n; ++i)
        {
            if(nums[i] <= num1)
            {
                num1 = nums[i];
            }
            else if(nums[i] <= num2)
            {
                num2 = nums[i];
            }
            else
            {
                return true;
            }
        }
        return false;
    }
};
