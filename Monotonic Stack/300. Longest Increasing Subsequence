300. Longest Increasing Subsequence
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?



class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> dp(nums.size(), 1);
        int res = 0;
        for(int i = 0; i < nums.size(); ++i)
        {
            for(int j = i+1; j < nums.size(); ++j)
            {
                if(nums[j] > nums[i])
                dp[j] = max(dp[j], dp[i] + 1);
            }
            res = max(res, dp[i]);
        }
        return res;
    }
 }
 
 
 class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return 0;
        vector<int> tail(n, 0);
        tail[0] = nums[0];
        int length = 1;
        for(int  i = 1; i < nums.size(); ++i)
        {
            if(nums[i] < tail[0])
                tail[0] = nums[i];
            else if(nums[i] > tail[length - 1])
                tail[length++] = nums[i];
            else
                tail[BinarySearch(tail, 0, length, nums[i])] = nums[i];
        }
        return length;   
    }
    
    int BinarySearch(vector<int> &tail, int left, int right, int target)
    {
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if(tail[mid] >= target)
                right = mid;
            else
                left = mid  + 1;
        }
        return right;
    }
};
