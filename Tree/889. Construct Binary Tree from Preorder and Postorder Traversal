889. Construct Binary Tree from Preorder and Postorder Traversal
Medium

387

21

Favorite

Share
Return any binary tree that matches the given preorder and postorder traversals.

Values in the traversals pre and post are distinct positive integers.

 

Example 1:

Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]

class Solution {
private:
    unordered_map<int,int> Map;
public:
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        //pre: 中左右
        //post: 左右中
        //greedy?
        if(pre.size() == 0) return NULL;
        for(int i = 0; i < post.size(); ++i)
        {
            Map[post[i]] = i;
        }
        
        return helper(pre, 0, pre.size() - 1, post, 0, pre.size() - 1);
    }
    
    TreeNode *helper(vector<int>& pre, int a, int b, vector<int>& post, int m, int n)
    {
        if(a > b) return NULL;
        TreeNode *root = new TreeNode(pre[a]);
        if(a == b) return root;
        
        int pos = Map[pre[a + 1]];
        root->left = helper(pre, a + 1, a + pos - m + 1, post, m, pos);
        root->right = helper(pre, a + pos - m + 2, b, post, pos + 1, n - 1);
        return root;
    }
};
