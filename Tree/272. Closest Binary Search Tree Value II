272. Closest Binary Search Tree Value II
Hard

355

17

Favorite

Share
Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k â‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

class Solution {
    

public:
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        helper(root, target);
        vector<int> res;
        for(int i = 0; i < k; ++i)
        {
            res.push_back(pq.top().val); pq.pop();
        }
        return res;
    }
    
    void helper(TreeNode *root, double target)
    {
        if(!root) return;
        helper(root->left, target);
        Node tmp(root->val, target);
        pq.push(tmp);
        helper(root->right, target);
    }
    
private:
    struct Node
    {
        double target;
        int val;
        Node(int val, double target)
        {
            this->val = val;
            this->target = target;
        }
        Node(){}
    };
    
    struct cmp
    {
        bool operator()(Node&a, Node&b)
        {
            return abs(a.target - a.val) > abs(b.target - b.val);
        }
    };
    priority_queue<Node, vector<Node>, cmp> pq;
};
