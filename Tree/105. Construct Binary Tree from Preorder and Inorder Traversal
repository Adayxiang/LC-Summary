105. Construct Binary Tree from Preorder and Inorder Traversal
Medium

1707

47

Favorite

Share
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size() == 0) return NULL;
        for(int i = 0; i < inorder.size(); ++i)
        {
            Map[inorder[i]] = i;
        }
        
        return helper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
    
    TreeNode *helper(vector<int>& preorder, int a, int b, vector<int>& inorder, int m, int n)
    {
        if(a > b) return NULL;
        TreeNode *root = new TreeNode(preorder[a]);
        if(a == b) return root;
        int pos = Map[preorder[a + 1]];
        
        root->left = helper(preorder, a + 1, a + pos - m, inorder, m, pos - 1);
        root->right = helper(preorder, a + pos - m + 1, b, inorder, pos + 1, n);
        return root;
    }
    
private:
    unordered_map<int,int> Map;
};   
