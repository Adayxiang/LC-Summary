331. Verify Preorder Serialization of a Binary Tree
Medium

490

29

Favorite

Share
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:

Input: "9,3,4,#,#,1,#,#,2,#,6,#,#"
Output: true

class Solution {
public:
    bool isValidSerialization(string preorder) {
        istringstream in(preorder);
        string t = "";
        vector<string> input;
        while(getline(in, t, ','))
        {
            input.push_back(t);
        }
        
        int cnt = 0;
        for(int i = 0; i < input.size() - 1; ++i)
        {
            if(input[i] == "#")
            {
                if(cnt == 0) 
                    return false;
                else
                    --cnt;
            }
            else
                ++cnt;
        }
        return cnt == 0 && input.back() == "#";
        
    }
};
