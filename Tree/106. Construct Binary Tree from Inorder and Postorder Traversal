106. Construct Binary Tree from Inorder and Postorder Traversal
Medium

852

18

Favorite

Share
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
   
class Solution {
private:
    unordered_map<int,int> Map;
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() == 0) return NULL;
        
        for(int i = 0; i < postorder.size(); ++i)
        {
            Map[inorder[i]] = i;
        }
        
        return helper(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1);
    }
    
    TreeNode *helper(vector<int>& inorder, int a, int b, vector<int>& postorder, int m, int n)
    {
        if(a > b || m > n) return NULL;
        TreeNode *root = new TreeNode(postorder[n]);
        
        int pos = Map[postorder[n]];
        
        
        root->left = helper(inorder, a, pos - 1, postorder, m, m + pos - a - 1);
        root->right = helper(inorder, pos + 1, b, postorder, m + pos - a, n - 1);
        return root;
    }
};   
