95. Unique Binary Search Trees II
Medium

1222

111

Favorite

Share
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]

class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n == 0) return {};
        return helper(n, 1, n);
    }
    
    vector<TreeNode *> helper(int n, int start, int end)
    {
        if(start > end)
        {
            return {NULL};
        }
        vector<TreeNode *> res;
        for(int i = start; i <= end; ++i)
        {
            vector<TreeNode*> left = helper(n, start, i - 1);
            vector<TreeNode*> right = helper(n, i + 1, end);
            for(auto &l : left)
            {
                for(auto &r : right)
                {
                    TreeNode *root = new TreeNode(i);
                    root->left = l;
                    root->right = r;
                    res.push_back(root);
                }
            }
        }
        return res;
    }
};
