333. Largest BST Subtree
Medium

336

35

Favorite

Share
Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

Note:
A subtree must include all of its descendants.

Example:

Input: [10,5,15,1,8,null,7]

   10 
   / \ 
  5  15 
 / \   \ 
1   8   7

Output: 3
Explanation: The Largest BST Subtree in this case is the highlighted one.
             The return value is the subtree's size, which is 3.
Follow up:
Can you figure out ways to solve it with O(n) time complexity?

class Solution {
public:
    int largestBSTSubtree(TreeNode* root) {
        if(!root) return 0;
        int minNumber = 0, maxNumber = 0;
        helper(root, minNumber, maxNumber);
        return res;
    }
    
    int helper(TreeNode *root, int &minNumber, int &maxNumber)
    {
        if(!root) return 0;
        int leftMin = INT_MAX, leftMax = INT_MIN, rightMin = INT_MAX, rightMax = INT_MIN;
        int left = helper(root->left, leftMin, leftMax);
        int right = helper(root->right, rightMin, rightMax);
        if(left == -1 || right == -1) return -1;
        if(root->val <= leftMax || root->val >= rightMin)
        {
            return -1;
        }
        minNumber = min(leftMin, root->val);
        maxNumber = max(rightMax, root->val);
        res = max(res, left + right + 1);
        return left + right + 1;
    }
    
private:
    int res = 0;
};
