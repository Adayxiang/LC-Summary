101. Symmetric Tree
Easy

2221

46

Favorite

Share
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
 

Note:
Bonus points if you could solve it both recursively and iteratively.

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return helper(root->left, root->right);
    }
    
    bool helper(TreeNode *left, TreeNode *right)
    {
        if(!left && !right) return true;
        if(!left && right) return false;
        if(left && !right) return false;
        if(left->val != right->val)
            return false;
        return helper(left->left, right->right) && helper(left->right, right->left);
    }
};



class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        queue<TreeNode*> q1,q2;
        q1.push(root->left);
        q2.push(root->right);
        while(!q1.empty() && !q2.empty())
        {
            TreeNode *l = q1.front();q1.pop();
            TreeNode *r = q2.front();q2.pop();
            if(!l&&!r) continue;
            if((!l&&r) || (!r&&l)) return false;
            if(l->val != r->val) return false;
            q1.push(l->left);
            q1.push(l->right);
            q2.push(r->right);
            q2.push(r->left);
        }
        return true;
    }
};
