"
Summary:
1. overlap subproblems: everything point is only related to previous three points.
2. optimal substructure: everything point 
3. length = min(length[i-1][j],length[i][j-1],length[i-1][j-1]) + 1
TC:O(n2)
SC:O(n2)->O(n)
Similar Problems:
Follow-up:
1. Maximal Square Follow Up:
Find one matrix with a diagonal of 1 and all the others of 0;
length = max(nums[i-length[i-1][j-1]][j],nums[i][j-length[i-1][j-1]]) == 0 ?length[i-1][j-1]) + 1, 0;
2. 85. Maximal Rectangle
Comments:
"

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) return 0;
        int m = matrix.size(), n = matrix[0].size(), res = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == 0 || j == 0) dp[i][j] = matrix[i][j] - '0';
                else if (matrix[i][j] == '1') {
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i][j - 1], dp[i - 1][j])) + 1;
                }
                res = max(res, dp[i][j]);
            }
        }
        return res * res;
    }
};
