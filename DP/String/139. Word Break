"
Summary:
TC:O()
SC:O()
Similar Problems:
Follow-Up:
Comments:
"

Solution1:
SC: O(n^2)
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        if(s.size() == 0) return true;
        if(wordDict.size() == 0) return false;
        unordered_set<string> unSet;
        for(auto a : wordDict)
        {
            unSet.insert(a);
        }
        int n = s.size();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        for(int j = 0; j < n; ++j)
        {
            for(int i = 0; i <= j; ++i)
            {
                if(unSet.find(s.substr(i, j - i + 1)) != unSet.end())
                {
                    dp[i][j] = true;
                }
                if(i > 0 && dp[0][i-1] && dp[i][j])
                {
                    dp[0][j] = true;
                }
            }
        }
        return dp[0][n-1];
    }
};

Solution2:
SC: O(n)
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
        vector<bool> dp(s.size() + 1);
        dp[0] = true;
        for (int i = 0; i < dp.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                if (dp[j] && wordSet.count(s.substr(j, i - j))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp.back();
    }
};
