Solution1:
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> res;
        unordered_set<string> st;
        if(s.size() == 0) return res;
        int n = s.size();
        string tmp;
        for(auto a : wordDict)
        {
            st.insert(a);
        }
        helper(s, st, 0, n, tmp, res);
        return res;
    }
    
    void helper(string &s, unordered_set<string>& wordDict, int start, int end, string &tmp, vector<string> &res)
    {
        if(start >= end)
        {
            tmp.pop_back();
            res.push_back(tmp);
            return;
        }
        for(int i = start; i < end; ++i)
        {
            if(wordDict.find(s.substr(start, i - start + 1)) != wordDict.end())
            {
                string cur = tmp;
                tmp = tmp + s.substr(start, i - start + 1) + " ";
                helper(s, wordDict, i + 1, end, tmp, res);
                tmp = cur;
            }
        }
    }
};

Solution2:
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> st;
        int n = s.size();
        if(n == 0) return {};
        vector<vector<bool>> isWord(n, vector<bool>(n, false));
        int maxLength = 0;
        for(int i = 0; i < wordDict.size(); ++i)
        {
            maxLength = max(maxLength, (int)wordDict[i].size());
            st.insert(wordDict[i]);
        }
        unordered_map<int, vector<string>> cache;
        return dfs(s, st, cache, 0, maxLength);
    }
    
    vector<string> dfs(string &s, unordered_set<string> wordDict, unordered_map<int, vector<string>> &cache, int start, int maxLength)
    {
        if(cache.find(start) != cache.end())
            return cache[start];
        vector<string> res;
        if(start >= s.length())
            res.push_back("");// ???
        for(int i = start; i - start <= maxLength && i < s.length(); ++i)
        {
            string str = s.substr(start, i - start + 1);
            if(wordDict.find(str) != wordDict.end())
            {
                vector<string> afterWards = dfs(s, wordDict, cache, i + 1, maxLength);
                for(auto &next : afterWards)
                {
                    if(i + 1 < s.size())
                    {
                        res.push_back(str + " " + next);
                    }
                    else
                    {
                        res.push_back(str);
                    }
                }
            }
        }
        cache[start] = res;
        return res;
        
    }
};

Solution3:
class Solution {
    unordered_map<string, vector<string>> m;

    vector<string> combine(string word, vector<string> prev){
        for(int i=0;i<prev.size();++i){
            prev[i]+=" "+word;
        }
        return prev;
    }

public:
    vector<string> wordBreak(string s, unordered_set<string>& dict) {
        if(m.count(s)) return m[s]; //take from memory
        vector<string> result;
        if(dict.count(s)){ //a whole string is a word
            result.push_back(s);
        }
        for(int i=1;i<s.size();++i){
            string word=s.substr(i);
            if(dict.count(word)){
                string rem=s.substr(0,i);
                vector<string> prev=combine(word,wordBreak(rem,dict));
                result.insert(result.end(),prev.begin(), prev.end());
            }
        }
        m[s]=result; //memorize
        return result;
    }
};
