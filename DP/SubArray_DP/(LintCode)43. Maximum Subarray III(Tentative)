"
Summary:
TC:O()
SC:O()
Similar Problems:
Follow-Up:
Comments:
"

class Solution {
public:
    /**
     * @param nums: A list of integers
     * @param k: An integer denote to find k non-overlapping subarrays
     * @return: An integer denote the sum of max k non-overlapping subarrays
     */
    int maxSubArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0) return 0;
        int n = nums.size();
        
        vector<vector<int>> localMax(n+1, vector<int>(k+1, 0));
        vector<vector<int>> globalMax(n+1, vector<int>(k+1, 0));
        
        for(int i  = 1; i <= n; ++i)
        {
            for(int j = 1; j <= k && j <= i; ++j)
            {
                localMax[j-1][j] = INT_MIN;
                localMax[i][j] = max(localMax[i-1][j], globalMax[i-1][j-1]) + nums[i-1];
                if(i == j)
                {
                    globalMax[i][j] = localMax[i][j];
                }
                else
                {
                    globalMax[i][j] = max(localMax[i][j], globalMax[i-1][j]);
                }
            }
        }
        return globalMax[n][k];
    }
};
