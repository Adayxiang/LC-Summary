"
Summary:
TC:O()
SC:O()
Similar Problems:
Follow-Up:
Comments:
"

Solution1: DP
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int res = nums[0], n = nums.size();
        vector<int> f(n, 0), g(n, 0);
        f[0] = nums[0];
        g[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            f[i] = max(max(f[i - 1] * nums[i], g[i - 1] * nums[i]), nums[i]);
            g[i] = min(min(f[i - 1] * nums[i], g[i - 1] * nums[i]), nums[i]);
            res = max(res, f[i]);
        }
        return res;
    }
};

Solution2: Kadane's Algorithm
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if(nums.size() == 0) return 0;
        int maxProduct = nums[0], minProduct = nums[0];
        int res = nums[0];
        for(int i = 1; i < nums.size(); ++i)
        {
            if(nums[i] >  0)
            {
                maxProduct = max(nums[i], maxProduct * nums[i]);
                minProduct = min(nums[i], minProduct * nums[i]);
            }
            else
            {
                int oldMax = maxProduct;
                maxProduct = max(nums[i], nums[i] * minProduct);
                minProduct = min(nums[i], nums[i] * oldMax);
            }
            res  = max(res, maxProduct);
        }
        return  res;
    }
};
