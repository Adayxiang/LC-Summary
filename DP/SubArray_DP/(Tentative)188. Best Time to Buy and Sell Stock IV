"
Summary:
TC:O()
SC:O()
Similar Problems:
Follow-Up:
Comments:
"
Solution1:
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if(prices.size() == 0)
            return 0;
        int n = prices.size();
        
        if(k >= n / 2)
        {
            int profit = 0;
            for(int i = 1; i < n; ++i)
            {
                int diff = prices[i] - prices[i - 1];
                if(diff > 0)
                {
                    profit += diff;
                }
            }
            return profit;
        }
        
        vector<vector<int>> localMax(n, vector<int>(k + 1, 0));
        vector<vector<int>> globalMax(n, vector<int>(k + 1, 0));
        
        for(int i = 1; i < n; ++i)
        {
            int diff = prices[i] - prices[i - 1];
            for(int j = 1; j <= k && j * 2 <= i + 1; ++j)
            {
                localMax[i][j] = max(localMax[i-1][j], globalMax[i-1][j-1]) + diff;
                globalMax[i][j] = max(localMax[i][j], globalMax[i-1][j]);
            }
        }
        
        return globalMax[n-1][k];
    }
};

Solution2:
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if(prices.empty()) return 0;
        if(k >= prices.size()) return solveMaxProfit(prices);
        int g[k+1] = {0};
        int l[k+1] = {0};
        for(int i = 0; i < prices.size() - 1; ++i)
        {
            int diff = prices[i + 1] - prices[i];
            for(int j = k; j >= 1; --j)
            {
                l[j] = max(g[j-1] + max(diff,0), l[j] + diff);
                g[j] = max(g[j], l[j]);
            }
        }
        return g[k];
    }
    
    int solveMaxProfit(vector<int> &prices)
    {
        int res = 0;
        for(int i = 1; i < prices.size(); ++i)
        {
            if(prices[i] - prices[i - 1] > 0)
            {
                res += prices[i] - prices[i - 1];
            }
        }
        return res;
    }
};
