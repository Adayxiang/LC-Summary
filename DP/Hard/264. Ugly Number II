264. Ugly Number II
Write a program to find the n-th ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 

Example:

Input: n = 10
Output: 12
Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.
Note:  

1 is typically treated as an ugly number.
n does not exceed 1690.

Solution1: set + deque + dp:
class Solution {
public:
    int nthUglyNumber(int n) {
        deque<int> tmp2;
        deque<int> tmp3;
        deque<int> tmp5;
        unordered_set<int> unSet;
        tmp2.push_back(1);
        tmp3.push_back(1);
        tmp5.push_back(1);
        unSet.insert(1);
        while(true)
        {
            if(unSet.size() == n) return tmp2.back();
            int minNumber = min(tmp2.front() * 2, min(tmp3.front() * 3, tmp5.front() * 5));
            if(unSet.find(minNumber) != unSet.end())
            {
                if(minNumber == tmp2.front() * 2) tmp2.pop_front();
                if(minNumber == tmp3.front() * 3) tmp3.pop_front();
                if(minNumber == tmp5.front() * 5) tmp5.pop_front();
            }
            else
            {
                if(minNumber == tmp2.front() * 2) tmp2.pop_front();
                if(minNumber == tmp3.front() * 3) tmp3.pop_front();
                if(minNumber == tmp5.front() * 5) tmp5.pop_front();
                tmp2.push_back(minNumber);
                tmp3.push_back(minNumber);
                tmp5.push_back(minNumber);
                unSet.insert(minNumber);
            }
        }
        return 0;
    }
};

Solution2: dp + pointer + inplace
class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int> res(1, 1);
        int i2 = 0, i3 = 0, i5 = 0;
        while (res.size() < n) {
            int m2 = res[i2] * 2, m3 = res[i3] * 3, m5 = res[i5] * 5;
            int mn = min(m2, min(m3, m5));
            if (mn == m2) ++i2;
            if (mn == m3) ++i3;
            if (mn == m5) ++i5;
            res.push_back(mn);
        }
        return res.back();
    }
};
