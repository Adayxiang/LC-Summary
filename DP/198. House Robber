"
Summary:
1.Dp is used to solve: bool/int/max/min, and the order of the problem could not be disorganized;
2.Because the the main problem is only related to the last two states, the SC could be optimized to O(2); 
TC:O(N)
SC:O(1)
Similar Problems: 213. House Robber II;
Comments:
1.Dynamic programming has two important definitions, one called "optimal substructure" and the other
One is called "overlap subproblem".
"

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(nums.size() == 0) return 0;
        if(n == 1) return nums[0];
        int dp[2];
        dp[0] = nums[0];
        dp[1] = max(nums[0],nums[1]);
        for(int i = 2; i < n; ++i)
        {
            dp[i%2] = max(dp[(i-1)%2], dp[i%2] + nums[i]);
        }
        return dp[(n - 1) % 2];
    }
};
