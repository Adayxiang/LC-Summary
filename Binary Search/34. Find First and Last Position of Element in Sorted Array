34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2,-1);
        if(nums.size() == 0) return res;
        int pLeft = 0, pRight = 0;
        int left = 0, right = nums.size();
        //search for the first element
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if(nums[mid] >= target) right = mid;
            else left = mid + 1;
        }
        pLeft = right;
        if(pLeft == nums.size() || nums[pLeft] != target) return res;
        
        //search for the second element
        left = 0, right = nums.size();
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if(nums[mid] > target) right = mid;
            else left = mid + 1;
        }
        pRight = right - 1;
        if(nums[pRight] != target) return res;
        
        res[0] = pLeft;
        res[1] = pRight;
        return res;
        
    }
};
