"
1. dfs + checkPalindromic
"

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> out;
        if(s.size() == 0) return res;
        helper(s, res, out, 0);
        return res;
    }
    
    void helper(string &s, vector<vector<string>> &res,vector<string> &out, int pos)
    {
        if(pos >= s.size())
        {
            res.push_back(out);
            return;
        }
        for(int i = pos; i < s.size(); ++i)
        {
            //string tmp = s.substr(pos, i - pos + 1);//define a new substring will consume a lot of time, change the check function
            if(checkPalindrome(s, pos, i) == true)
            {
                out.push_back(s.substr(pos, i - pos + 1));
                helper(s, res, out, i + 1);
                out.pop_back();
            }
        }
    }
    
    bool checkPalindrome(string &input, int left, int right)
    {
        while(left < right)
        {
            if(input[left] != input[right])
            {
                return false;
            }
            left++, right--;
        }
        return true;
    }
};
