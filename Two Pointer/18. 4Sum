18. 4Sum
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> res;
        if(n < 4) return res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i + 3 < n; ++i)
        {
            if(nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target) break;
            if(nums[i] + nums[n-3] + nums[n-2] + nums[n-1] < target) continue;
            for(int j = i + 1; j + 2 < n; ++j)
            {
                if(nums[i] + nums[j] + nums[j+1] + nums[j+2] > target) break;
                if(nums[i] + nums[j] + nums[n-2] + nums[n-1] < target) continue;
                int left = j + 1, right = n - 1;
                while(left < right)
                {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if(sum == target)
                    {
                        res.push_back({nums[i] , nums[j] , nums[left] , nums[right]});
                        while(left + 1< right && nums[left] == nums[left + 1]) ++left;
                        while(left + 1 < right && nums[right] == nums[right- 1]) --right;
                        ++left, --right;
                    }
                    else if(sum > target)
                    {
                        --right;
                    }
                    else
                    {
                        ++left;
                    }
                }
                while(j + 2 < n && nums[j] == nums[j+1]) ++j;
            }
            while(i + 3 < n && nums[i] == nums[i+1])++i;
        }
        return res;
    }
};
