373. Find K Pairs with Smallest Sums
You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]] 
Explanation: The first 3 pairs are returned from the sequence: 
             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [1,1],[1,1]
Explanation: The first 2 pairs are returned from the sequence: 
             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [1,3],[2,3]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]

class Solution {
private:
    struct Node
    {
        int val;
        int index1;
        int index2;
        Node(){}
        Node(int val, int index1, int index2)
        {
            this->val = val;
            this->index1 = index1;
            this->index2 = index2;
        }
    };
    
    struct cmp
    {
        bool operator()(Node &a, Node&b)
        {
            return a.val > b.val;
        }
    };
    
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        priority_queue<Node, vector<Node>,cmp> pq;
        int m = nums1.size(), n = nums2.size();
        vector<vector<int>> res;
        if(m == 0 || n == 0) return res;
        for(int i = 0; i < m; ++i)
        {
            Node cur;
            cur.val = nums1[i] + nums2[0];
            cur.index1 = i;
            cur.index2 = 0;
            pq.push(cur);
        }
        
        while(!pq.empty() && k > 0)
        {
            Node cur = pq.top();pq.pop();
            res.push_back({nums1[cur.index1], nums2[cur.index2]});
            --k;
            if(cur.index2 + 1 < n)
            {
                cur.index2++;
                cur.val = nums1[cur.index1] + nums2[cur.index2];
                pq.push(cur);
            }
        }
        return res;
    }
};
