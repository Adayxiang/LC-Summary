378. Kth Smallest Element in a Sorted Matrix
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.
Note: 
You may assume k is always valid, 1 ≤ k ≤ n2.

class Solution {
private:
    struct Node
    {
        int val;
        int row;
        int col;
        Node(){};
        Node(int val, int row, int col)
        {
            this->val = val;
            this->row = row;
            this->col = col;
        }
    };
    
    struct cmp
    {
        bool operator()(Node &a, Node&b)
        {
            return a.val > b.val;
        }
    };
    
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        if(n == 0) return -1;
        priority_queue<Node, vector<Node>, cmp> pq;
        for(int i = 0; i < n; ++i)
        {
            pq.push(Node(matrix[i][0], i, 0));
        }
        
        while(!pq.empty() && k > 0)
        {
            Node cur = pq.top();pq.pop();
            if(k == 1) return cur.val;
            --k;
            if(cur.col + 1 < n)
            {
                pq.push(Node(matrix[cur.row][cur.col+1], cur.row, cur.col+1));
            }
        }
        
        return -1;
    }
};

class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        if(matrix.size() == 0 || matrix[0].size() == 0) return -1;
        int rows = matrix.size();
        int cols = matrix[0].size();
        
        return kthHelper(matrix, 0, rows * cols - 1, k);
    }
    
    int kthHelper(vector<vector<int>>& matrix, int start, int end, int k)
    {
        int rows = matrix.size();
        int left = start;
        int right = end;
        int pivot = matrix[start / rows][start % rows];
        
        while(left <= right)
        {
            while(left <= right && matrix[left / rows][left % rows] <= pivot) ++left;
            while(left <= right && matrix[right / rows][right % rows] >= pivot) --right;
            if(left < right) swap(matrix[left / rows][left % rows], matrix[right / rows][right % rows]);
        }
        
        swap(matrix[start / rows][start % rows], matrix[right / rows][right % rows]);
        
        if(right + 1 == k)
        {
            return matrix[right / rows][right % rows];
        }
        else if(right + 1 < k)
        {
            return kthHelper(matrix, right + 1, end, k);
        }
        else
        {
            return kthHelper(matrix, start, right - 1, k);
        }
    }
};
