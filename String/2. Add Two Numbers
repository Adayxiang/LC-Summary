2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *root = new ListNode(0);
        root->val = (l1->val + l2->val) % 10;
        int c = (l1->val + l2->val) / 10;
        root->next = helper(l1->next, l2->next, c);
        return root;
    }
    
    ListNode *helper(ListNode* l1, ListNode* l2, int c)
    {
        if(l1 == NULL && l2 == NULL && c == 0) return NULL;
        ListNode *root = new ListNode(0);
        int v1 = (l1 == NULL) ? 0 : l1->val;
        int v2 = (l2 == NULL) ? 0 : l2->val;
        root->val = (v1 + v2 + c) % 10;
        c = (v1 + v2 + c) / 10;
        if(l1 == NULL && l2 != NULL) root->next = helper(l1,l2->next,c);
        else if(l1 != NULL && l2 == NULL) root->next = helper(l1->next,l2,c);
        else if(l1 == NULL && l2 == NULL) root->next = helper(l1,l2,c);
        else root->next = helper(l1->next,l2->next,c);
        return root;
    }
};
