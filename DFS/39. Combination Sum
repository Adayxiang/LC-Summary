39. Combination Sum
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        if(candidates.size() == 0) return res;
        vector<int> tmp;
        int sum = 0;
        sort(candidates.begin(), candidates.end());
        helper(candidates, tmp, target, res, 0, sum);
        return res;
    }
    
    void helper(vector<int>& candidates, vector<int> &tmp, int target, vector<vector<int>> &res, int index, int &sum)
    {
        /*
        if(index >= candidates.size())
        {
            return;
        }
        */
        for(int i = index; i < candidates.size(); ++i)
        {
            if(sum + candidates[i] > target) break;
            tmp.push_back(candidates[i]);
            sum += candidates[i];
            if(sum == target) 
            {
                res.push_back(tmp);
                tmp.pop_back();
                sum -= candidates[i];
                return;
            }
            else
            {
                helper(candidates, tmp, target, res, i, sum);
                tmp.pop_back();
                sum -= candidates[i];
            }
        }
        return;
    }
};
