257. Binary Tree Paths
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if(!root) return res;
        string tmp;
        helper(root, tmp, res);
        return res;
    }
    
    void helper(TreeNode *root, string &tmp, vector<string> &res)
    {
        if(!root)
            return;
        string store = tmp;
        tmp.append(to_string(root->val));
        if(!root->left && !root->right)
        {
            res.push_back(tmp);
            tmp = store;
            return;
        }
        tmp.append("->");
        helper(root->left, tmp, res);
        helper(root->right, tmp, res);
        tmp = store;
    }
};

Note: Watch out when int_to_string, the length of the number is not always 1, inorder to do backtracking, we need to record the initial string.
