216. Combination Sum III
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        if(candidates.size() == 0) return res;
        vector<int> tmp;
        int sum = 0;
        sort(candidates.begin(), candidates.end());
        helper(candidates, tmp, target, res, 0, sum);
        return res;
    }
    
    void helper(vector<int>& candidates, vector<int> &tmp, int target, vector<vector<int>> &res, int index, int &sum)
    {
        /*
        if(index >= candidates.size())
        {
            return;
        }
        */
        for(int i = index; i < candidates.size(); ++i)
        {
            if(sum + candidates[i] > target) break;
            tmp.push_back(candidates[i]);
            sum += candidates[i];
            if(sum == target) 
            {
                res.push_back(tmp);
                tmp.pop_back();
                sum -= candidates[i];
                return;
            }
            else
            {
                helper(candidates, tmp, target, res, i + 1, sum);
                tmp.pop_back();
                sum -= candidates[i];
            }
            while(i + 1 < candidates.size() && candidates[i] == candidates[i + 1])
                i++;
        }
        return;
    }
};
