79. Word Search
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(word.size() == 0) return true;
        int m = board.size();
        if(m == 0) return false;
        int n = board[0].size();
        if(n == 0) return false;
        string tmp;
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for(int i = 0; i < m; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                if(helper(board, word, visited, i, j, tmp))
                    return true;
            }
        }
        return false;
    }
    
    bool helper(const vector<vector<char>>& board, const string &word,  vector<vector<bool>> &visited, int i, int j, string &tmp)
    {
        if(i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j] || tmp.size() > word.size())
            return false;
        if(tmp.size() == word.size()) return tmp == word;
        if(board[i][j] != word[tmp.size()]) return false;
        tmp.push_back(board[i][j]);
        visited[i][j] = true;
        if(tmp == word) return true;
        if(helper(board, word, visited, i + 1, j, tmp)) return true;
        if(helper(board, word, visited, i - 1, j, tmp)) return true;
        if(helper(board, word, visited, i, j + 1, tmp)) return true;
        if(helper(board, word, visited, i, j - 1, tmp)) return true;
        visited[i][j] = false;
        tmp.pop_back();
        return false;
        
    }
};

Solution2: optimized method
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        for(int i = 0; i < board.size(); ++i)
        {
            for(int j = 0; j < board[0].size(); ++j)
            {
                if(helper(board, word, i, j, 0))
                    return true;
            }
        }
        return false;
    }
    
    bool helper(vector<vector<char>>& board, string &word, int i, int j, int index)
    {
        if(index == word.size()) return true;
        if(i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] != word[index]) return false;
        board[i][j] = '#';
        if(helper(board, word, i+1, j, index + 1)) return true;
        if(helper(board, word, i-1, j, index + 1)) return true;
        if(helper(board, word, i, j+1, index + 1)) return true;
        if(helper(board, word, i, j-1, index + 1)) return true;
        board[i][j] = word[index];
        return false;
    }
};

Note: 
1. Watch out the pruning method that if the string now does not match the required, return false;
2. Learn to use bool as the return value;
