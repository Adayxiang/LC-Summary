46. Permutations
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.size() == 0) return res;
        vector<int> tmp;
        vector<int> visited(nums.size(), 0);
        helper(nums, visited, tmp, res);
        return res;
    }
    
    void helper(vector<int> &nums, vector<int> &visited, vector<int> &tmp, vector<vector<int>> &res)
    {
        if(tmp.size() == nums.size())
        {
            res.push_back(tmp);
            return;
        }
        for(int i = 0; i < nums.size(); ++i)
        {
            if(visited[i] == 1) continue;
            tmp.push_back(nums[i]);
            visited[i] = 1;
            helper(nums, visited, tmp, res);
            visited[i] = 0;
            tmp.pop_back();
        }
        return;
    }
};
