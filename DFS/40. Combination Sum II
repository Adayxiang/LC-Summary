40. Combination Sum II
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        if(candidates.size() == 0) return res;
        vector<int> tmp;
        int sum = 0;
        sort(candidates.begin(), candidates.end());
        helper(candidates, tmp, target, res, 0, sum);
        return res;
    }
    
    void helper(vector<int>& candidates, vector<int> &tmp, int target, vector<vector<int>> &res, int index, int &sum)
    {
        /*
        if(index >= candidates.size())
        {
            return;
        }
        */
        for(int i = index; i < candidates.size(); ++i)
        {
            if(sum + candidates[i] > target) break;
            tmp.push_back(candidates[i]);
            sum += candidates[i];
            if(sum == target) 
            {
                res.push_back(tmp);
                tmp.pop_back();
                sum -= candidates[i];
                return;
            }
            else
            {
                helper(candidates, tmp, target, res, i + 1, sum);
                tmp.pop_back();
                sum -= candidates[i];
            }
            while(i + 1 < candidates.size() && candidates[i] == candidates[i + 1])
                i++;
        }
        return;
    }
};
