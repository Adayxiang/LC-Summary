17. Letter Combinations of a Phone Number
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        vector<string> record = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        if(digits.size() == 0) return res;
        string tmp;
        helper(res, record, tmp, digits, 0);
        return res;
    }
    
    void helper(vector<string> &res, const vector<string> &record, string &tmp, const string &digits, int index)
    {
        if(index >= digits.size())
        {
            res.push_back(tmp);
            return;
        }
        int button = digits[index] - '0';
        for(int i = 0; i < record[button].size(); ++i)
        {
            tmp.push_back(record[button][i]);
            helper(res, record, tmp, digits, index + 1);
            tmp.pop_back();
        }
        return;
    }
};
