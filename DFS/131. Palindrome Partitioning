131. Palindrome Partitioning
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

Solution1:dfs:
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        if(s.size() == 0) return res;
        vector<string> tmp;
        helper(s, res, tmp, 0);
        return res;
    }
    
    void helper(string &s, vector<vector<string>> &res, vector<string> &tmp, int index)
    {
        if(index >= s.size())
        {
            res.push_back(tmp);
            return;
        }
        for(int i = index; i < s.size(); ++i)
        {
            if(isPalindrom(s,index, i))
            {
                tmp.push_back(s.substr(index, i - index + 1));
                helper(s, res, tmp, i + 1);
                tmp.pop_back();
            }
        }
        return;
    }
    
    bool isPalindrom(string &s, int left ,int right)
    {
        while(left < right)
        {
            if(s[left] != s[right]) return false;
            else
            {
                left++, --right;
            }
        }
        return true;
    }
};


Solution2:dfs + memo
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        if(s.size() == 0) return res;
        vector<vector<int>> dp(s.size(), vector<int>(s.size(), 0));
        for(int i = 0; i < s.size(); ++i)
        {
            for(int j = 0; j <= i; ++j)
            {
                if(s[i] == s[j] && (i - j <= 2 || dp[j+1][i-1] == 1))
                    dp[j][i] = 1;
            }
        }
        vector<string> tmp;
        helper(s, res, tmp, 0, dp);
        return res;
    }
    
    void helper(string &s, vector<vector<string>> &res, vector<string> &tmp, int index, vector<vector<int>> &dp)
    {
        if(index >= s.size())
        {
            res.push_back(tmp);
            return;
        }
        for(int i = index; i < s.size(); ++i)
        {
            if(dp[index][i])
            {
                tmp.push_back(s.substr(index, i - index + 1));
                helper(s, res, tmp, i + 1,dp);
                tmp.pop_back();
            }
        }
        return;
    }
};
