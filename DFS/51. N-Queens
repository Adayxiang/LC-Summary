51. N-Queens
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example:

Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.


class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> tmp(n, string(n, '.'));
        helper(res, tmp, 0, n);
        return res;
    }
    
    void helper(vector<vector<string>> &res, vector<string> &tmp, int index, int n)
    {
        if(index == n)
        {
            res.push_back(tmp);
            return;
        }
        for(int i = 0; i < n; ++i)
        {
            tmp[index][i] = 'Q';
            if(check(tmp, index, i))
            {
                helper(res, tmp, index + 1, n);
            }
            tmp[index][i] = '.';
        }
        return;
    }
    
    bool check(vector<string> &tmp, int row,  int col)
    {
        for(int i = 0; i < row; ++i)
        {
            if(tmp[i][col] == 'Q')
                return false;
        }
        for(int i = 0; i < col; ++i)
        {
            if(tmp[row][i] == 'Q')
                return false;
        }
        for(int i = 1; ; ++i)
        {
            if(row-i < 0 || col - i < 0) break;
            if(tmp[row-i][col-i] == 'Q')
                return false;
        }
        for(int i = 1; ; ++i)
        {
            if(row-i < 0 || col + i >= tmp[0].size()) break;
            if(tmp[row-i][col+i] == 'Q')
                return false;
        }
        return true;
    }
};
